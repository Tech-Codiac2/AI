1) 
graph= {
'5' : ['3','7'],
'3' : ['2','4'],
'7' : ['8'],
'2' : [],
'4' : ['8'],
'8' : []
}
visited = []
queue = []
def bfs(visited,graph,node):
    visited.append(node)
    queue.append(node)
    
    while queue:
        m = queue.pop(0)
        print(m,end = "")
        
    for neighbour in graph[m]:
        if neighbour not in visited:
            visited.append(neighbour)
            queue.append(neighbour)

print("following is the Breadth First Search : ")
bfs(visited,graph,'7') 


2)
dict_hn = {'Arad': 336, 'Bucharest': 0, 'Craiova': 160, 'Drobeta': 242,
           'Eforie': 161, 'Fagaras': 176, 'Giurgiu': 77, 'Hirsova': 151,
           'Iasi': 226, 'Lugoj': 244, 'Mehadia': 241, 'Neamt': 234,
           'Oradea': 380, 'Pitesti': 100, 'Rimnicu': 193, 'Sibiu': 253,
           'Timisoara': 329, 'Urziceni': 80, 'Vaslui': 199, 'Zerind': 374}

dict_gn = {'Arad': {'Zerind': 75, 'Timisoara': 118, 'Sibiu': 140},
           'Bucharest': {'Urziceni': 85, 'Giurgiu': 90, 'Pitesti': 101, 'Fagaras': 211},
           'Craiova': {'Drobeta': 120, 'Pitesti': 138, 'Rimnicu': 146},
           'Drobeta': {'Mehadia': 75, 'Craiova': 120},
           'Eforie': {'Hirsova': 86},
           'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
           'Giurgiu': {'Bucharest': 90},
           'Hirsova': {'Eforie': 86, 'Urziceni': 98},
           'Iasi': {'Neamt': 87, 'Vaslui': 92},
           'Lugoj': {'Mehadia': 70, 'Timisoara': 111},
           'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
           'Neamt': {'Iasi': 87},
           'Oradea': {'Zerind': 71, 'Sibiu': 151},
           'Pitesti': {'Rimnicu': 97, 'Bucharest': 101, 'Craiova': 138},
           'Rimnicu': {'Sibiu': 80, 'Pitesti': 97, 'Craiova': 146},
           'Sibiu': {'Rimnicu': 80, 'Fagaras': 99, 'Arad': 140, 'Oradea': 151},
           'Timisoara': {'Lugoj': 111, 'Arad': 118},
           'Urziceni': {'Bucharest': 85, 'Hirsova': 98, 'Vaslui': 142},
           'Vaslui': {'Iasi': 92, 'Urziceni': 142},
           'Zerind': {'Oradea': 71, 'Arad': 75}}

import queue as Q

def DLS(city, visitedstack, startlimit, endlimit):
    global result
    found=0
    result=result+city+' '
    visitedstack.append(city)
    if city==goal:
        return 1
    if startlimit==endlimit:
        return 0
    for eachcity in dict_gn[city].keys():
        if eachcity not in visitedstack:
            found=DLS(eachcity, visitedstack, startlimit+1, endlimit)
            if found:
                return found

def IDDFS(city, visitedstack, endlimit):
    global result
    for i in range(0, endlimit):
        print("Searching at Limit: ",i)
        found=DLS(city, visitedstack, 0, i)
        if found:
            print("Found")
            break
        else:
            print("Not Found! ")
            print(result)
            print(" ---- ")
            result=' '
            visitedstack=[]


start = 'Arad'
goal = 'Bucharest'
result = ''

visitedstack=[]
IDDFS(start, visitedstack, 9)
print("IDDFS Traversal from ",start," to ", goal," is: ")
print(result)


3) 
dict_hn = {'Arad': 336, 'Bucharest': 0, 'Craiova': 160, 'Drobeta': 242,
           'Eforie': 161, 'Fagaras': 176, 'Giurgiu': 77, 'Hirsova': 151,
           'Iasi': 226, 'Lugoj': 244, 'Mehadia': 241, 'Neamt': 234,
           'Oradea': 380, 'Pitesti': 100, 'Rimnicu': 193, 'Sibiu': 253,
           'Timisoara': 329, 'Urziceni': 80, 'Vaslui': 199, 'Zerind': 374}

dict_gn = {'Arad': {'Zerind': 75, 'Timisoara': 118, 'Sibiu': 140},
           'Bucharest': {'Urziceni': 85, 'Giurgiu': 90, 'Pitesti': 101, 'Fagaras': 211},
           'Craiova': {'Drobeta': 120, 'Pitesti': 138, 'Rimnicu': 146},
           'Drobeta': {'Mehadia': 75, 'Craiova': 120},
           'Eforie': {'Hirsova': 86},
           'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
           'Giurgiu': {'Bucharest': 90},
           'Hirsova': {'Eforie': 86, 'Urziceni': 98},
           'Iasi': {'Neamt': 87, 'Vaslui': 92},
           'Lugoj': {'Mehadia': 70, 'Timisoara': 111},
           'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
           'Neamt': {'Iasi': 87},
           'Oradea': {'Zerind': 71, 'Sibiu': 151},
           'Pitesti': {'Rimnicu': 97, 'Bucharest': 101, 'Craiova': 138},
           'Rimnicu': {'Sibiu': 80, 'Pitesti': 97, 'Craiova': 146},
           'Sibiu': {'Rimnicu': 80, 'Fagaras': 99, 'Arad': 140, 'Oradea': 151},
           'Timisoara': {'Lugoj': 111, 'Arad': 118},
           'Urziceni': {'Bucharest': 85, 'Hirsova': 98, 'Vaslui': 142},
           'Vaslui': {'Iasi': 92, 'Urziceni': 142},
           'Zerind': {'Oradea': 71, 'Arad': 75}}

import queue as Q

start='Arad'
goal='Bucharest'
result=''

def get_fn(citystr):
    cities=citystr.split(" , ")
    hn=gn=0
    for ctr in range(0, len(cities)-1):
        gn=gn+dict_gn[cities[ctr]][cities[ctr+1]]
    hn=dict_hn[cities[len(cities)-1]]
    return(hn+gn)

def expand(cityq):
    global result
    tot, citystr, thiscity=cityq.get()
    if thiscity==goal:
        result=citystr+" : : "+str(tot)
        return
    for cty in dict_gn[thiscity]:
        cityq.put((get_fn(citystr+" , "+cty), citystr+" , "+cty, cty))
    expand(cityq)

def main():
    cityq=Q.PriorityQueue()
    thiscity=start
    cityq.put((get_fn(start),start,thiscity))
    expand(cityq)
    print("The A* path with the total is: ")
    print(result)

main()


4) 
from queue import Queue

romaniaMap = {
    'Arad': ['Sibiu', 'Zerind', 'Timisoara'],
    'Zerind': ['Arad', 'Oradea'],
    'Oradea': ['Zerind', 'Sibiu'],
    'Sibiu': ['Arad', 'Oradea', 'Fagaras', 'Rimnicu'],
    'Timisoara': ['Arad', 'Lugoj'],
    'Lugoj': ['Timisoara', 'Mehadia'],
    'Mehadia': ['Lugoj', 'Drobeta'],
    'Drobeta': ['Mehadia', 'Craiova'],
    'Craiova': ['Drobeta', 'Rimnicu', 'Pitesti'],
    'Rimnicu': ['Sibiu', 'Craiova', 'Pitesti'],
    'Fagaras': ['Sibiu', 'Bucharest'],
    'Pitesti': ['Rimnicu', 'Craiova', 'Bucharest'],
    'Bucharest': ['Fagaras', 'Pitesti', 'Giurgiu', 'Urziceni'],
    'Giurgiu': ['Bucharest'],
    'Urziceni': ['Bucharest', 'Vaslui', 'Hirsova'],
    'Hirsova': ['Urziceni', 'Eforie'],
    'Eforie': ['Hirsova'],
    'Vaslui': ['Iasi', 'Urziceni'],
    'Iasi': ['Vaslui', 'Neamt'],
    'Neamt': ['Iasi']
}

def bfs(startingNode, destinationNode):
    visited = {}
    distance = {}
    parent = {}
    bfs_traversal_output = []
    
    queue = Queue()
    for city in romaniaMap.keys():
        visited[city] = False
        parent[city] = None
        distance[city] = -1
        
    startingCity = startingNode
    visited[startingCity] = True
    distance[startingCity] = 0
    queue.put(startingCity)
    
    while not queue.empty():
        u = queue.get()
        bfs_traversal_output.append(u)
        
        for v in romaniaMap[u]:
            if not visited[v]:
                visited[v] = True
                parent[v] = u
                distance[v] = distance[u] + 1
                queue.put(v)
    
    g = destinationNode
    path = []
    while g is not None:
        path.append(g)
        g = parent[g]
    path.reverse()
    print(path)

# Example usage:
bfs('Arad', 'Bucharest')


5) 
import numpy
# Parameter initialization
genes = 2
chromosomes = 10
mattingPoolSize = 6
offspringSize = chromosomes - mattingPoolSize
lb = -5
ub = 5
populationSize = (chromosomes, genes)
generations = 3
#Population initialization
population = numpy.random.uniform(lb, ub, populationSize)

for generation in range(generations):
    print(("Generation:", generation+1))
    fitness = numpy.sum(population*population, axis=1)
    print("\npopulation")
    print(population)
    print("\nfitness calcuation")
    print(fitness)
    # Following statement will create an empty two dimensional array to store parents
    parents = numpy.empty((mattingPoolSize, population.shape[1]))

# A loop to extract one parent in each iteration
for p in range(mattingPoolSize):
    # Finding index of fittest chromosome in the population
    fittestIndex = numpy.where(fitness == numpy.max(fitness))
    # Extracting index of fittest chromosome
    fittestIndex = fittestIndex[0][0]
    # Copying fittest chromosome into parents array
    parents[p, :] = population[fittestIndex, :]
    # Changing fitness of fittest chromosome to avoid reselection of that chromosome
    fitness[fittestIndex] = -1
print("\nParents:")
print(parents)

# Following statement will create an empty two dimensional array to store offspring
offspring = numpy.empty((offspringSize, population.shape[1]))
for k in range(offspringSize):
    #Determining the crossover point
    crossoverPoint = numpy.random.randint(0,genes)
    # Index of the first parent.
    parent1Index = k%parents.shape[0]
    # Index of the second.
    parent2Index = (k+1)%parents.shape[0]
    # Extracting first half of the offspring
    offspring[k, 0: crossoverPoint] = parents[parent1Index, 0: crossoverPoint]
    # Extracting second half of the offspring
    offspring[k, crossoverPoint:] = parents[parent2Index, crossoverPoint:]
print("\nOffspring after crossover:")
print(offspring)

# Implementation of random initialization mutation.
for index in range(offspring.shape[0]):
    randomIndex = numpy.random.randint(1,genes)
    randomValue = numpy.random.uniform(lb, ub, 1)
    offspring [index, randomIndex] = offspring [index, randomIndex] + randomValue
    print("\n Offspring after Mutation")
    print(offspring)
    population[0:parents.shape[0], :] = parents
    population[parents.shape[0]:, :] = offspring
    print("\nNew Population for next generation:")
    print(population)

fitness = numpy.sum(population*population, axis=1)
fittestIndex = numpy.where(fitness == numpy.max(fitness))
# Extracting index of fittest chromosome
fittestIndex = fittestIndex[0][0]
# Getting Best chromosome
fittestInd = population[fittestIndex, :]
bestFitness = fitness[fittestIndex]
print("\nBest Individual:")
print(fittestInd)
print("\nBest Individual's Fitness:")
print(bestFitness)


6) 
import numpy as np
class Perceptron:
  def __init__(self, learning_rate, epochs):
    self.weights = None
    self.bias = None
    self.learning_rate = learning_rate
    self.epochs = epochs
  
  def activation(self, z):
    return np.heaviside(z, 0)
  
  def fit(self, X, y):
    n_features = X.shape[1]
    self.weights = np.zeros((n_features))
    self.bias = 0
    for epoch in range(self.epochs):
      for i in range(len(X)):
        z = np.dot(X, self.weights) + self.bias
        y_pred = self.activation(z)
        
        self.weights = self.weights + self.learning_rate * (y[i] - y_pred[i]) * X[i]
        self.bias = self.bias + self.learning_rate * (y[i] - y_pred[i])
    return self.weights, self.bias

  def predict(self, X):
    z = np.dot(X, self.weights) + self.bias
    return self.activation(z)

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
import numpy as np

iris = load_iris()
X = iris.data[:, (0, 1)]
y = (iris.target == 0).astype(int)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)

perceptron = Perceptron(0.001, 100)

perceptron.fit(X_train, y_train)

pred = perceptron.predict(X_test)

7) 
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# New Antecedent/Consequent objects hold universe variables and membership
# functions
quality = ctrl.Antecedent(np.arange(0, 11, 1), 'quality')
service = ctrl.Antecedent(np.arange(0, 11, 1), 'service')
tip = ctrl.Consequent(np.arange(0, 26, 1), 'tip')

# Auto-membership function population is possible with .automf(3, 5, or 7)
quality.automf(3)
service.automf(3)

# Custom membership functions can be built interactively with a familiar,
# Pythonic API
tip['low'] = fuzz.trimf(tip.universe, [0, 0, 10])
tip['medium'] = fuzz.trimf(tip.universe, [0, 10, 20])
tip['high'] = fuzz.trimf(tip.universe, [10, 20, 25])

# You can see how these look with .view()
quality['average'].view()


service.view()

tip.view()

rule1 = ctrl.Rule(quality['poor'] | service['poor'], tip['low'])
rule2 = ctrl.Rule(service['average'], tip['medium'])
rule3 = ctrl.Rule(service['good'] | quality['good'], tip['high'])

rule1.view()


tipping_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
tipping = ctrl.ControlSystemSimulation(tipping_ctrl)

# Pass inputs to the ControlSystem using Antecedent labels with Pythonic API
# Note: if you like passing many inputs all at once, use .inputs(dict_of_data)
tipping.input['quality'] = 7.2
tipping.input['service'] = 9.3

# Crunch the numbers
tipping.compute()

print(tipping.output['tip'])
tip.view(sim=tipping)





8) 
import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt

x_food_qual = np.arange(0, 11, 1)
x_service_qual = np.arange(0, 11, 1)
x_tip  = np.arange(0, 26, 1)

# Visualize these universes and membership functions
fig, (ax0, ax1, ax2) = plt.subplots(nrows=3, figsize=(8, 9))

ax0.plot(x_food_qual, qual_lo, 'b', linewidth=1.5, label='Poor')
ax0.plot(x_food_qual, qual_md, 'g', linewidth=1.5, label='Average')
ax0.plot(x_food_qual, qual_hi, 'r', linewidth=1.5, label='Excellent')
ax0.set_title('Food Quality')
ax0.legend()

ax1.plot(x_service_qual, serv_lo, 'b', linewidth=1.5, label='Poor')
ax1.plot(x_service_qual, serv_md, 'g', linewidth=1.5, label='Average')
ax1.plot(x_service_qual, serv_hi, 'r', linewidth=1.5, label='Excellent')
ax1.set_title('Service Quality')
ax1.legend()

ax2.plot(x_tip, tip_lo, 'b', linewidth=1.5, label='Low')
ax2.plot(x_tip, tip_md, 'g', linewidth=1.5, label='Medium')
ax2.plot(x_tip, tip_hi, 'r', linewidth=1.5, label='High')
ax2.set_title('Tip Amount')
ax2.legend()

# Turn off top/right axes
for ax in (ax0, ax1, ax2):
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()

plt.tight_layout()

# We need the activation of our fuzzy membership functions at these values.
# The exact values 6.5 and 9.8 do not exist on our universes...
# This is what fuzz.interp_membership exists for!
food_qual_level_lo = fuzz.interp_membership(x_food_qual, qual_lo, 6.5)
food_qual_level_md = fuzz.interp_membership(x_food_qual, qual_md, 6.5)
food_qual_level_hi = fuzz.interp_membership(x_food_qual, qual_hi, 6.5)

service_qual_level_lo = fuzz.interp_membership(x_service_qual, serv_lo, 9.8)
service_qual_level_md = fuzz.interp_membership(x_service_qual, serv_md, 9.8)
service_qual_level_hi = fuzz.interp_membership(x_service_qual, serv_hi, 9.8)

# Now we take our rules and apply them. Rule 1 concerns poor food OR service.
# The OR operator means we take the maximum of these two.
active_rule1 = np.fmax(food_qual_level_lo, service_qual_level_lo)

# Now we apply this by clipping the top off the corresponding output
# membership function with `np.fmin`
tip_activation_lo = np.fmin(active_rule1, tip_lo)  # removed entirely to 0

# For rule 2 we connect acceptable service to medium tipping
tip_activation_md = np.fmin(service_qual_level_md, tip_md)

# For rule 3 we connect high service OR high food with high tipping
active_rule3 = np.fmax(food_qual_level_hi, service_qual_level_hi)
tip_activation_hi = np.fmin(active_rule3, tip_hi)
tip0 = np.zeros_like(x_tip)

# Visualize this
fig, ax0 = plt.subplots(figsize=(8, 3))

ax0.fill_between(x_tip, tip0, tip_activation_lo, facecolor='b', alpha=0.7)
ax0.plot(x_tip, tip_lo, 'b', linewidth=0.5, linestyle='--', )
ax0.fill_between(x_tip, tip0, tip_activation_md, facecolor='g', alpha=0.7)
ax0.plot(x_tip, tip_md, 'g', linewidth=0.5, linestyle='--')
ax0.fill_between(x_tip, tip0, tip_activation_hi, facecolor='r', alpha=0.7)
ax0.plot(x_tip, tip_hi, 'r', linewidth=0.5, linestyle='--')
ax0.set_title('Output membership activity')

# Turn off top/right axes
for ax in (ax0,):
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()

plt.tight_layout()

# Aggregate all three output membership functions together
aggregated = np.fmax(tip_activation_lo,
                     np.fmax(tip_activation_md, tip_activation_hi))

# Calculate defuzzified result
tip = fuzz.defuzz(x_tip, aggregated, 'centroid')
tip_activation = fuzz.interp_membership(x_tip, aggregated, tip)  # for plot

# Visualize this
fig, ax0 = plt.subplots(figsize=(8, 3))

ax0.plot(x_tip, tip_lo, 'b', linewidth=0.5, linestyle='--', )
ax0.plot(x_tip, tip_md, 'g', linewidth=0.5, linestyle='--')
ax0.plot(x_tip, tip_hi, 'r', linewidth=0.5, linestyle='--')
ax0.fill_between(x_tip, tip0, aggregated, facecolor='Orange', alpha=0.7)
ax0.plot([tip, tip], [0, tip_activation], 'k', linewidth=1.5, alpha=0.9)
ax0.set_title('Aggregated membership and result (line)')

# Turn off top/right axes
for ax in (ax0,):
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()

plt.tight_layout()

9) 
import math
import random
import pandas as pd
import numpy as np
from sklearn.datasets import load_diabetes

# Function to encode class labels to numerical values
def encode_class(mydata):
    classes = []
    for i in range(len(mydata)):
        if mydata[i][-1] not in classes:
            classes.append(mydata[i][-1])
    for i in range(len(classes)):
        for j in range(len(mydata)):
            if mydata[j][-1] == classes[i]:
                mydata[j][-1] = i
    return mydata

# Function to split data into training and testing sets
def splitting(mydata, ratio):
    train_num = int(len(mydata) * ratio)
    train = []
    test = list(mydata)
    while len(train) < train_num:
        index = random.randrange(len(test))
        train.append(test.pop(index))
    return train, test

# Function to group data instances under each class
def groupUnderClass(mydata):
    data_dict = {}
    for i in range(len(mydata)):
        if mydata[i][-1] not in data_dict:
            data_dict[mydata[i][-1]] = []
        data_dict[mydata[i][-1]].append(mydata[i])
    return data_dict

# Function to calculate mean and standard deviation for a set of numbers
def MeanAndStdDev(numbers):
    avg = np.mean(numbers)
    stddev = np.std(numbers)
    return avg, stddev

# Function to calculate mean and standard deviation for each class
def MeanAndStdDevForClass(mydata):
    info = {}
    data_dict = groupUnderClass(mydata)
    for classValue, instances in data_dict.items():
        info[classValue] = [MeanAndStdDev(attribute) for attribute in zip(*instances)]
    return info

# Function to calculate Gaussian probability density function
def calculateGaussianProbability(x, mean, stdev):
    epsilon = 1e-10
    expo = math.exp(-(math.pow(x - mean, 2) / (2 * math.pow(stdev + epsilon, 2))))
    return (1 / (math.sqrt(2 * math.pi) * (stdev + epsilon))) * expo

# Function to calculate probabilities for each class
def calculateClassProbabilities(info, test):
    probabilities = {}
    for classValue, classSummaries in info.items():
        probabilities[classValue] = 1
        for i in range(len(classSummaries)):
            mean, std_dev = classSummaries[i]
            x = test[i]
            probabilities[classValue] *= calculateGaussianProbability(x, mean, std_dev)
    return probabilities

# Function to predict the class for a single instance
def predict(info, test):
    probabilities = calculateClassProbabilities(info, test)
    bestLabel = max(probabilities, key=probabilities.get)
    return bestLabel

# Function to get predictions for multiple instances
def getPredictions(info, test):
    predictions = [predict(info, instance) for instance in test]
    return predictions

# Function to calculate accuracy rate
def accuracy_rate(test, predictions):
    correct = sum(1 for i in range(len(test)) if test[i][-1] == predictions[i])
    return (correct / float(len(test))) * 100.0

# Load data using sklearn
diabetes = load_diabetes()
X, y = diabetes.data, diabetes.target
mydata = np.column_stack((X, y))

# Encode classes and convert attributes to float
mydata = encode_class(mydata)

# Split the data into training and testing sets
ratio = 0.7
train_data, test_data = splitting(mydata, ratio)
print('Total number of examples:', len(mydata))
print('Training examples:', len(train_data))
print('Test examples:', len(test_data))

# Train the model
info = MeanAndStdDevForClass(train_data)

# Test the model
predictions = getPredictions(info, test_data)
accuracy = accuracy_rate(test_data, predictions)
print('Accuracy of the model:', accuracy)


pip install scikit-learn

pip install pandas

pip install matplotlib

pip install scikit-fuzzy
